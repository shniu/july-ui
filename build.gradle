/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.3/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    //dependencies {
    //classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:1"
    //classpath "org.owasp:dependency-check-gradle:5.2.1"
    //classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
    //}
}

//plugins {
//    id 'idea'
//    // Apply the java plugin to add support for Java
//    id 'java'
//
//    // Apply the application plugin to add support for building an application
//    id 'application'
//}


allprojects {
    apply plugin: 'idea'
}

subprojects {

    repositories {
        maven { url "https://maven.aliyun.com/repository/central" }
        // maven { url "https://mymavenrepo.com/repo/2w5k9sU2AsKfaYehyqno/" }

        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
        mavenCentral()
    }

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    version = '0.0.1'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    ext {
        isSnapshot = version.endsWith("-SNAPSHOT")

        guavaVersion = "27.0.1-jre"
        lombokVersion = '1.18.8'

        springBootVersion = '2.1.8.RELEASE'
    }

    dependencies {
        // This dependency is found on compile classpath of this component and consumers.
        implementation("com.google.guava:guava:$guavaVersion")

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"

        // Use JUnit test framework
        // testImplementation 'junit:junit:4.12'
        testImplementation platform('org.junit:junit-bom:5.5.1')
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation('org.junit.jupiter:junit-jupiter-engine')
        testImplementation('org.mockito:mockito-junit-jupiter:2.26.0')
    }

    configurations.all {
        exclude group: "junit", module: "junit"
        exclude group: "org.assertj", module: "assertj-core"
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    wrapper {
        gradleVersion = '5.6'
    }

    apply from: "$rootDir/gradle/config/scripts/checkstyle.gradle"
    apply from: "$rootDir/gradle/config/scripts/coverage.gradle"

    style.excludePackages = [
    ]
    style.excludeClasses = [
    ]
    coverage.excludePackages = [
    ]
    coverage.excludeClasses = [
    ]
}

//configure(subprojects - project(':tiny-bootstrap')) {
//    project(":tiny-bootstrap").dependencies {
//        implementation(project)
//    }
//}
